most-used {
  font-size: 26px;
  font-family: sans-serif;
  font-style: italic;
  font-weight: bold;
  text-transform: uppercase;
  text-decoration: none;
  text-align: center;
  text-shadow: black;
  line-height: 1.5;
  list-style: none;
  letter-spacing: 2;
  color: blue;
  background-color: beige;
  border: 5px solid blue;
  margin: 0px/auto;
  padding: 0px/auto;
  width: 900px/100%;
  height: auto;
  display: inline-block;
  position: relative;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  cursor: pointer;
  content: "TOP";
}

selector:first-child {
  first child element of the parent will be changed
}
selector:nth-child(5) {
  nth number/ even or odd too
}

selector::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  color: red;
}

selector::after {
  content: "";
}

a:active {  
  in effect while pressing the link
}
a:hover {
 applies when you hover over the anker
}
a:link {
  only targets actually linked ankers  
}
a:visited {
  targets ankers that got used 
}



if i use multiple selectors (p,h1,footer), then they will all get the same changes in the brackets
if i do this -> footer p {} then it will apply to only the p in the footer

#ID {
  id can only be used once
}
.class {
  class can be applied to multiple elements
}

Conflict Priority {

1. !important
2. Inline style
3. ID
4. Class
5. * (Universal selector)

}

universal selector doesnt work with inherance, it applies the values to everything 

Not all properties get inherited. It's mostly ones related to text: font-family, font-size, font-weight, 
font-style, color, line-height, letter-spacing, text-align, text-transform, text-shadow, list-style, etc.

---------------------------------------------------------- 
|                Margin                                  |
|      ___________________________________________       |
|     |                     Padding               |      |
|     |     <-----------width--------------> ^    |      |
|     |     ################################ |    |      |
|     |     ###############Content########## |    |      |
|     |     ################################ ^    |      |
|     |                                   height  |      |
|     |___________________________________________|      |
|                                       Border ^         |
|                                                        |
----------------------------------------------------------

Inline boxes only occupy the space they need
Block Level Boxes occupy all the space they can and create line brakes after them
Inline-Block-Boxes are a mix of the other two

Block-Level:
Visuallized as blocks
Occupy 100% of parent elemnt's width
stacked vertically
CSS: display: block;

Inline:
occupies only the space necessary
causes no line-breaks
heights and widths do not apply
Paddings and margins are applied only horizontally
CSS: display: inline;

Inline-Block:
Occupies only content's space
Causes no line breaks
Box-model applies as showed
CSS: display: inline-block;

Normal Flow:
Default positioning
Element is "in flow"
Elements are simply laid out according to their order in the HTML code

Default positioning
position: relative;

Absolute Positioning
Element is removed from the normal flow: "out of flow"
No impact on surrounding elements, might overlap them
We use top, bottom, left or right to offset the element from its reltively positioned container

position: absolute 
